services:
  kafka:
    image: apache/kafka:3.8.0
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list" ]
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      - PATH=/opt/kafka/bin:$PATH
      # KRaft settings
      - KAFKA_NODE_ID=0
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # General Configuration
      - CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
    networks:
      - parkflow

  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - parkflow

  duckdb:
    build:
      context: ./docker/duckdb
      dockerfile: Dockerfile
    container_name: duckdb
    ports:
      - "3000:3000"
    volumes:
      - ./data:/data
    environment:
      - DUCKDB_DATABASE=/data/analytics.db
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - parkflow

  parkflow-entry-exit:
    image: parkflow-entry-exit:latest
    ports:
      - "8085:8085"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - parkflow
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

#  parkflow-dashboard:
#    build:
#      context: ./parkflow-dashboard
#      dockerfile: Dockerfile
#    ports:
#      - "8050:8050"
#    environment:
#      - DUCKDB_API_URL=http://duckdb:3000
#    depends_on:
#      duckdb:
#        condition: service_healthy
#    networks:
#      - parkflow
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8050" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 15s

volumes:
  kafka_data:

networks:
  parkflow:
    name: parkflow
    driver: bridge
